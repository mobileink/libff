load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "string_flag", "string_setting")
load("@bazel_skylib//lib:selects.bzl", "selects")

################################################################
## command-line config parameters
## e.g. --//bzl/config:curve="edwards" --no//bzl/config:multicore

bool_flag( name = "lowmem",
# "Limit the size of multi-exponentiation tables, for low-memory platforms"
           build_setting_default = False)
# -DLOWMEM=1
config_setting( name = "enable_lowmem",
                flag_values = { ":lowmem": "true" })

bool_flag( name = "multicore",
           build_setting_default = False)
# -DMULTICORE=1
config_setting( name = "enable_multicore",
                flag_values = { ":multicore": "true" })

# In serialization, output raw binary data (instead of decimal),
# which is smaller and faster.
bool_flag( name = "binary_output",
           build_setting_default = True)
# -DBINARY_OUTPUT
config_setting( name = "enable_binary_output",
                flag_values = { ":binary_output": "true" })

# transitive setting, for ate_pairing
bool_flag( name = "with_libgmp",
             build_setting_default = True)
config_setting( name = "enable_libgmp",
                flag_values = { ":with_libgmp": str(True) })

# Serialize Fp elements as their Montgomery representations (faster
# but not human-readable)
bool_flag( name = "montgomery_output",
           build_setting_default = True)
# -DMONTGOMERY_OUTPUT
config_setting( name = "enable_montgomery_output",
                flag_values = { ":montgomery_output": "true" })

bool_flag( name = "use_pt_compression",
           build_setting_default = True)
config_setting( name = "enable_point_compression",
                flag_values = { ":use_pt_compression": "true" })
config_setting( name = "disable_point_compression",
                flag_values = { ":use_pt_compression": "False" })
# if false: -DNO_PT_COMPRESSION=1

# Collect counts for field and curve operations
bool_flag( name = "profile_op_counts",
           build_setting_default = False)
config_setting( name = "enable_profile_op_counts",
                flag_values = { ":profile_op_counts": "true" })
# -DPROFILE_OP_COUNTS=1

# Convert each element of the key pair to affine coordinates
bool_flag( name = "use_mixed_addition",
           build_setting_default = False)
config_setting( name = "enable_mixed_addition",
                flag_values = { ":use_mixed_addition": "true" })
# -DUSE_MIXED_ADDITION=1

# Use procps for memory profiling
bool_flag( name = "procps",
           build_setting_default = False)
# default:    -DNO_PROCPS
config_setting( name = "enable_procps",
                flag_values = { ":procps": "True" })
config_setting( name = "disable_procps",
                flag_values = { ":procps": "False" })

# Enable debugging of C++ STL (does not imply DEBUG)
bool_flag( name = "cxx_debug",  # CPP_DEBUG
           build_setting_default = False)
config_setting( name = "enable_cxx_debug",
                flag_values = { ":cxx_debug": "true" })
# -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC

# Enable link-time and aggressive optimizations
bool_flag( name = "optimize",  # PERFORMANCE
           build_setting_default = False)
config_setting( name = "enable_optimization",
                flag_values = { ":optimize": "true" })
# -DNDEBUG
#     "${CMAKE_CXX_FLAGS} -flto -fuse-linker-plugin"
    # "${CMAKE_EXE_LINKER_FLAGS} -flto"

# Use architecture-specific optimized assembly code
bool_flag( name = "use_asm",
           build_setting_default = True)
# -DUSE_ASM
config_setting( name = "enable_asm",
                flag_values = { ":use_asm": "true" })

